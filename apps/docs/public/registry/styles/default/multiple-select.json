{
  "name": "multiple-select",
  "dependencies": [
    "cmdk"
  ],
  "registryDependencies": [
    "badge",
    "command"
  ],
  "files": [
    {
      "name": "multiple-select.tsx",
      "content": "\"use client\"\n\nimport * as React from \"react\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { X } from \"lucide-react\"\n\nimport { Badge } from \"./badge\"\nimport {\n  Command,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandList,\n} from \"./command\"\n\ntype Option = {\n  value: number\n  label: string\n}\n\ninterface FancyMultiSelectProps {\n  options: Option[]\n  notFoundMessage?: string\n}\n\nexport function FancyMultiSelect({\n  options,\n  notFoundMessage,\n}: FancyMultiSelectProps) {\n  const inputRef = React.useRef<HTMLInputElement>(null)\n  const [open, setOpen] = React.useState(false)\n  const [selected, setSelected] = React.useState<Option[]>([])\n  const [inputValue, setInputValue] = React.useState(\"\")\n\n  const handleUnselect = React.useCallback((option: Option) => {\n    setSelected((prev) => prev.filter((s) => s.value !== option.value))\n  }, [])\n\n  const handleKeyDown = React.useCallback(\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\n      const input = inputRef.current\n      if (input) {\n        if (e.key === \"Delete\" || e.key === \"Backspace\") {\n          if (input.value === \"\") {\n            setSelected((prev) => {\n              const newSelected = [...prev]\n              newSelected.pop()\n              return newSelected\n            })\n          }\n        }\n        if (e.key === \"Escape\") {\n          input.blur()\n        }\n      }\n    },\n    []\n  )\n\n  const selectables = options.filter((option) => !selected.includes(option))\n\n  return (\n    <Command\n      onKeyDown={handleKeyDown}\n      className=\"overflow-visible bg-transparent\"\n    >\n      <div className=\"border-input ring-offset-background focus-within:ring-ring group rounded-md border px-3 py-2 text-sm focus-within:ring-2 focus-within:ring-offset-2\">\n        <div className=\"flex flex-wrap gap-1\">\n          {selected.map((option) => {\n            return (\n              <Badge\n                key={option.value}\n                variant=\"default\"\n                className=\"bg-primary-500 text-white\"\n              >\n                {option.label}\n                <button\n                  className=\"ring-offset-background focus:ring-ring ml-1 rounded-full outline-none focus:ring-2 focus:ring-offset-2\"\n                  onKeyDown={(e) => {\n                    if (e.key === \"Enter\") {\n                      handleUnselect(option)\n                    }\n                  }}\n                  onMouseDown={(e) => {\n                    e.preventDefault()\n                    e.stopPropagation()\n                  }}\n                  onClick={() => handleUnselect(option)}\n                >\n                  <X className=\"text-muted-foreground hover:text-error-400 size-3\" />\n                </button>\n              </Badge>\n            )\n          })}\n          <CommandPrimitive.Input\n            ref={inputRef}\n            value={inputValue}\n            onValueChange={setInputValue}\n            onBlur={() => setOpen(false)}\n            onFocus={() => setOpen(true)}\n            placeholder=\"Select options...\"\n            className=\"placeholder:text-muted-foreground ml-2 flex-1 bg-transparent outline-none\"\n          />\n        </div>\n      </div>\n      <div className=\"relative mt-2\">\n        {open && selectables.length > 0 ? (\n          <div className=\"bg-popover text-popover-foreground animate-in absolute top-0 z-10 w-full rounded-md border shadow-md outline-none\">\n            <CommandEmpty>\n              {notFoundMessage ? notFoundMessage : \"Data Not Found\"}\n            </CommandEmpty>\n            <CommandGroup className=\"h-full overflow-auto\">\n              <CommandList>\n                {selectables.map((option) => {\n                  return (\n                    <CommandItem\n                      key={option.value}\n                      onMouseDown={(e) => {\n                        e.preventDefault()\n                        e.stopPropagation()\n                      }}\n                      onSelect={() => {\n                        setInputValue(\"\")\n                        setSelected((prev) => [...prev, option])\n                      }}\n                      className={\"cursor-pointer\"}\n                    >\n                      {option.label}\n                    </CommandItem>\n                  )\n                })}\n              </CommandList>\n            </CommandGroup>\n          </div>\n        ) : null}\n      </div>\n    </Command>\n  )\n}\n"
    }
  ],
  "type": "components:ui"
}