{
  "name": "multiple-select",
  "dependencies": [
    "cmdk"
  ],
  "registryDependencies": [
    "badge",
    "command"
  ],
  "files": [
    {
      "name": "multiple-select.tsx",
      "content": "\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport { Command as CommandPrimitive } from \"cmdk\"\r\nimport { X } from \"lucide-react\"\r\n\r\nimport { Badge } from \"./badge\"\r\nimport {\r\n  Command,\r\n  CommandEmpty,\r\n  CommandGroup,\r\n  CommandItem,\r\n  CommandList,\r\n} from \"./command\"\r\n\r\ntype Option = {\r\n  value: number\r\n  label: string\r\n}\r\n\r\ninterface FancyMultiSelectProps {\r\n  options: Option[]\r\n  notFoundMessage?: string\r\n}\r\n\r\nexport function FancyMultiSelect({\r\n  options,\r\n  notFoundMessage,\r\n}: FancyMultiSelectProps) {\r\n  const inputRef = React.useRef<HTMLInputElement>(null)\r\n  const [open, setOpen] = React.useState(false)\r\n  const [selected, setSelected] = React.useState<Option[]>([])\r\n  const [inputValue, setInputValue] = React.useState(\"\")\r\n\r\n  const handleUnselect = React.useCallback((option: Option) => {\r\n    setSelected((prev) => prev.filter((s) => s.value !== option.value))\r\n  }, [])\r\n\r\n  const handleKeyDown = React.useCallback(\r\n    (e: React.KeyboardEvent<HTMLDivElement>) => {\r\n      const input = inputRef.current\r\n      if (input) {\r\n        if (e.key === \"Delete\" || e.key === \"Backspace\") {\r\n          if (input.value === \"\") {\r\n            setSelected((prev) => {\r\n              const newSelected = [...prev]\r\n              newSelected.pop()\r\n              return newSelected\r\n            })\r\n          }\r\n        }\r\n        if (e.key === \"Escape\") {\r\n          input.blur()\r\n        }\r\n      }\r\n    },\r\n    []\r\n  )\r\n\r\n  const selectables = options.filter((option) => !selected.includes(option))\r\n\r\n  return (\r\n    <Command\r\n      onKeyDown={handleKeyDown}\r\n      className=\"overflow-visible bg-transparent\"\r\n    >\r\n      <div className=\"border-input ring-offset-background focus-within:ring-ring group rounded-md border px-3 py-2 text-sm focus-within:ring-2 focus-within:ring-offset-2\">\r\n        <div className=\"flex flex-wrap gap-1\">\r\n          {selected.map((option) => {\r\n            return (\r\n              <Badge\r\n                key={option.value}\r\n                variant=\"default\"\r\n                className=\"bg-primary-500 text-white\"\r\n              >\r\n                {option.label}\r\n                <button\r\n                  className=\"ring-offset-background focus:ring-ring ml-1 rounded-full outline-none focus:ring-2 focus:ring-offset-2\"\r\n                  onKeyDown={(e) => {\r\n                    if (e.key === \"Enter\") {\r\n                      handleUnselect(option)\r\n                    }\r\n                  }}\r\n                  onMouseDown={(e) => {\r\n                    e.preventDefault()\r\n                    e.stopPropagation()\r\n                  }}\r\n                  onClick={() => handleUnselect(option)}\r\n                >\r\n                  <X className=\"text-muted-foreground hover:text-error-400 size-3\" />\r\n                </button>\r\n              </Badge>\r\n            )\r\n          })}\r\n          <CommandPrimitive.Input\r\n            ref={inputRef}\r\n            value={inputValue}\r\n            onValueChange={setInputValue}\r\n            onBlur={() => setOpen(false)}\r\n            onFocus={() => setOpen(true)}\r\n            placeholder=\"Select options...\"\r\n            className=\"placeholder:text-muted-foreground ml-2 flex-1 bg-transparent outline-none\"\r\n          />\r\n        </div>\r\n      </div>\r\n      <div className=\"relative mt-2\">\r\n        {open && selectables.length > 0 ? (\r\n          <div className=\"bg-popover text-popover-foreground animate-in absolute top-0 z-10 w-full rounded-md border shadow-md outline-none\">\r\n            <CommandEmpty>\r\n              {notFoundMessage ? notFoundMessage : \"Data Not Found\"}\r\n            </CommandEmpty>\r\n            <CommandGroup className=\"h-full overflow-auto\">\r\n              <CommandList>\r\n                {selectables.map((option) => {\r\n                  return (\r\n                    <CommandItem\r\n                      key={option.value}\r\n                      onMouseDown={(e) => {\r\n                        e.preventDefault()\r\n                        e.stopPropagation()\r\n                      }}\r\n                      onSelect={() => {\r\n                        setInputValue(\"\")\r\n                        setSelected((prev) => [...prev, option])\r\n                      }}\r\n                      className={\"cursor-pointer\"}\r\n                    >\r\n                      {option.label}\r\n                    </CommandItem>\r\n                  )\r\n                })}\r\n              </CommandList>\r\n            </CommandGroup>\r\n          </div>\r\n        ) : null}\r\n      </div>\r\n    </Command>\r\n  )\r\n}\r\n"
    }
  ],
  "type": "components:ui"
}